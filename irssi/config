## SERVERS
servers = (
  # {{{
  {
    address = "irc.quakenet.org";
    chatnet = "qnet";
    port = "6667";
    autoconnect = "yes";
  },
  {
    address = "irc.freenode.net";
    chatnet = "fnode";
    port = "6697";
    use_ssl = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.epiknet.org";
    chatnet = "epik";
    port = "6667";
    autoconnect = "no";
  },
  {
    address = "irc.nixers.net";
    chatnet = "nixers";
    port = "6697";
    use_ssl = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.blinkenshell.org";
    chatnet = "blink";
    port = "6697";
    use_ssl = "yes";
    autoconnect = "yes";
  },
  {
    address = "irc.iotek.org";
    chatnet = "iotek";
    port = "6697";
    use_ssl = "yes";
    autoconnect = "no";
  },
  {
    address = "irc.oftc.net";
    chatnet = "oftc";
    port = "6697";
    use_ssl = "yes";
    autoconnect = "yes";
  }
);
# }}}

## COMMANDS
chatnets = {
  # {{{
  fnode = {
    type = "IRC";
    nick = "z3bra";
    autosendcmd = "/msg NickServ IDENTIFY password; /unquery NickServ";
  };
  blink = { type = "IRC"; };
  qnet = {
    type = "IRC";
    nick = "z3bra";
    autosendcmd = "/msg Q@Cserve.quakenet.org AUTH z3bra passw0rd; /unquery Q@Cserve.quakenet.org";
  };
  nixers = {
    type = "IRC";
    nick = "z3bra";
    autosendcmd = "/msg nickserv IDENTIFY password; /unquery nickserv";
  };
  iotek = { type = "IRC"; };
  epik = { type = "IRC"; };
  oftc = { type = "IRC"; };
};
# }}}

## CHANNELS
channels = (
  # {{{
  { name = "#defrag-france"; chatnet = "qnet"; autojoin = "Yes"; },
  { name = "#nixers"; chatnet = "nixers"; autojoin = "Yes"; },
  { name = "#vim-fr"; chatnet = "fnode"; autojoin = "Yes"; },
  { name = "#archlinux-fr"; chatnet = "fnode"; autojoin = "Yes"; },
  { name = "#blinkenshell"; chatnet = "blink"; autojoin = "Yes"; },
  { name = "#iotek"; chatnet = "iotek"; autojoin = "No"; },
  { name = "#crux"; chatnet = "fnode"; autojoin = "Yes"; },
  { name = "#frenchfags"; chatnet = "fnode"; autojoin = "Yes"; },
  { name = "#2f30"; chatnet = "fnode"; autojoin = "Yes"; },
  { name = "#morpheus"; chatnet = "oftc"; autojoin = "Yes"; }
);
# }}}

## ALIASES
aliases = {
  # {{{
  J = "join";
  WJOIN = "join -window";
  WQUERY = "query -window";
  P = "part";
  DESCRIBE = "action";
  DATE = "time";
  HOST = "userhost";
  LAST = "lastlog";
  SAY = "msg *";
  WI = "whois";
  WII = "whois $0 $0";
  WW = "whowas";
  W = "window";
  N = "names";
  M = "msg";
  T = "topic";
  C = "clear";
  K = "kick";
  KB = "kickban";
  KN = "knockout";
  BANS = "ban";
  B = "ban";
  MUB = "unban *";
  UB = "unban";
  IG = "ignore";
  UNIG = "unignore";
  SB = "scrollback";
  SH = "exec -";
  UMODE = "mode $N";
  WC = "window close";
  WN = "window new hide";
  WS = "window show";
  WK = "window stick";
  WM = "window move";
  WG = "window grow";
  WL = "window list";
  SV = "say Irssi $J ($V) - http://irssi.org/";
  GOTO = "sb goto";
  CHAT = "dcc chat";
  RUN = "SCRIPT LOAD";
  UPTIME = "eval exec - expr `date +%s` - \\$F | awk '{print \"Irssi uptime: \"int(\\\\\\$1/3600/24)\"d \"int(\\\\\\$1/3600%24)\"h \"int(\\\\\\$1/60%60)\"m \"int(\\\\\\$1%60)\"s\" }'";
  CALC = "exec - if which bc &>/dev/null\\; then echo '$*' | bc | awk '{print \"$*=\"$$1}'\\; else echo bc was not found\\; fi";
  SBAR = "STATUSBAR";
  INVITELIST = "mode $C +I";
  Q = "QUIT";
  QU = "QUERY";
  UQ = "UNQUERY";
  HL = "lastlog -hilight -new";
  OP = "msg ChanServ OP $C";
  DEOP = "msg ChanServ DEOP $C";
  CHEZWAM = "say http://chezmoicamarche.com";
};
# }}}

## STATUSBAR
statusbar = {
  # {{{
  # formats:
  # when using {templates}, the template is shown only if it's argument isn't
  # empty unless no argument is given. for example {sb} is printed always,
  # but {sb $T} is printed only if $T isn't empty.

  items = {
    # start/end text in statusbars
    barstart = "";
    barend = "";

    topicbarstart = "{topicsbstart}";
    topicbarend = "{topicsbend}";

    # Top and bottom line
    #line_top = "%K──────────────┐";
    #line_bottom = "%K              │";
    line_top = "";
    line_bottom = "";

    # treated "normally", you could change the time/user name to whatever
    time = "{sb $Z}";
    user = "{sb {sbnickmode $cumode}$N{sbmode $usermode}{sbaway $A}}";

    # treated specially .. window is printed with non-empty windows,
    # window_empty is printed with empty windows
    window = "{sb $winref:$tag/$itemname{sbmode $M}}";
    window_empty = "{sb $winref{sbservertag $tag}}";
    prompt = "{prompt $[.15]itemname}";
    prompt_empty = "{prompt $winname}";
    topic = " $topic";
    topic_empty = " Irssi v$J - http://www.irssi.org";

    # all of these treated specially, they're only displayed when needed
    lag = "{sb Lag: $0-}";
    act = "{sb Act: $0-}";
    more = "-- more --";
  };

  # there's two type of statusbars. root statusbars are either at the top
  # of the screen or at the bottom of the screen. window statusbars are at
  # the top/bottom of each split window in screen.
  default = {
    # the "default statusbar" to be displayed at the bottom of the window.
    # contains all the normal items.
    window = {
      disabled = "yes";

      # window, root
      type = "window";
      # top, bottom
      placement = "bottom";
      # number
      position = "1";
      # active, inactive, always
      visible = "active";

      # list of items in statusbar in the display order
      items = {
        barstart = { priority = "100"; };
        time = { };
        user = { };
        window = { };
        window_empty = { };
        lag = { priority = "-1"; };
        act = { priority = "10"; };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # statusbar to use in inactive split windows
    window_inact = {
      type = "window";
      placement = "bottom";
      position = "1";
      visible = "inactive";
      items = {
        barstart = { priority = "100"; };
        window = { };
        window_empty = { };
        more = { priority = "-1"; alignment = "right"; };
        barend = { priority = "100"; alignment = "right"; };
      };
    };

    # we treat input line as yet another statusbar :) It's possible to
    # add other items before or after the input line item.
    prompt = {
      type = "root";
      placement = "bottom";
      # we want to be at the bottom always
      position = "100";
      visible = "always";
      items = {
        prompt = { priority = "-1"; };
        # prompt_empty = { priority = "-1"; };
        # treated specially, this is the real input line.
        input = { priority = "10"; };
      };
    };

    # topicbar
    topic = {
      type = "root";
      placement = "top";
      position = "1";
      visible = "inactive";
      items = {
        topicbarstart = { priority = "100"; };
        topic = { };
        topic_empty = { };
        topicbarend = { priority = "100"; alignment = "right"; };
      };
      disabled = "yes";
    };
    void_topic = { placement = "top"; position = "0"; };
    void_status = {
      placement = "top";
      items = { line_top = { }; };
      position = "100";
    };
    #void_bottom = {
    #  placement = "bottom";
    #  items = { line_bottom = { }; };
    #  position = "1";
    #};
    awl_0 = {
      placement = "top";
      items = {
        barstart = { priority = "100"; };
        awl_0 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
    awl_1 = {
      placement = "top";
      items = {
        barstart = { priority = "100"; };
        awl_1 = { };
        barend = { priority = "100"; alignment = "right"; };
      };
    };
  };
};
# }}}

## FORMAT
settings = {
  # {{{
  core = {
    real_name = "z3bra";
    user_name = "z-brah";
    nick = "z3bra";
    timestamp_format = "  %H:%M (%d/%m)";
    quit_message = "int random() { return 3; /*number randomly chosen with a dice roll*/ }";
  };

  "fe-text" = {
    scrollback_time = "48h";
    actlist_sort = "refnum";
    indent = "8";
  };

  "fe-common/core" = {
    autolog = "yes";
    autolog_path = "~/var/log/irc/%Y/$tag/$0.%m-%d.log";
    theme = "default";
    bell_beeps = "yes";
    beep_msg_level = "MSGS NOTICES INVITES DCC DCCMSGS HILIGHT";
    use_status_window = "yes";
    expand_escapes = "yes";
    timestamp_level = "MSGS HILIGHT";
    timestamp_timeout = "900";
    completion_char = ",";
  };
  "perl/core/scripts" = {
    awl_display_key = "%K$H $C $S";
    awl_display_key_active = "$H %Y$C $S";
    # awl_sort = "refnum";
    # awl_hide_data = "0";
    awl_placement = "top";
    awl_separator = "\\ ";
  };
};
# }}}

## HILIGHTS
hilights = (
  # {{{
  { text = "z3bra"; nick = "yes"; word = "no"; }
);
# }}}

logs = { };
ignores = ( { mask = "bosko"; level = "ALL"; } );

windows = {
  1 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#vim-fr";
        tag = "fnode";
      }
    );
  };
  2 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#archlinux-fr";
        tag = "fnode";
      }
    );
  };
  3 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#nixers";
        tag = "nixers";
      }
    );
  };
  4 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#defrag-france";
        tag = "qnet";
      }
    );
  };
  5 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#frenchfags";
        tag = "fnode";
      }
    );
  };
  6 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#crux";
        tag = "fnode";
      }
    );
  };
  7 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#2f30";
        tag = "fnode";
      }
    );
  };
  8 = {
    items = (
      {
        type = "CHANNEL";
        chat_type = "IRC";
        name = "#blinkenshell";
        tag = "blink";
      }
    );
  };
};
keyboard = ( { key = "et"; id = "command"; data = "usr/bin :)"; } );
